
09.02.2023

Удалось под jQuery обратиться по ссылке на локальный диск. Браузер не препятствовал открытию файла. Значит будет работать.
Вырисовывается структура всей системы.

10.02.2023

Делаем апи интерфейс
Контейнер запустили
Пускаем апи интерфейса

11.02.2023

Запускаем контейнер с сервером Flask
Работает. Сервер отвечает. Контейнер работает. А в нем сервер.
Отдает библиотеку jQuery.

12.02.2023

Так и не получилось вчера запустить обращение из локальной страницы по jQuery по ajax на http://localhost
Пишет - 'null' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
Делать "дыру" на сервере не будем.
Пойдем более стандартным путем.

Сначала попробуем открывать локальную ссылку со страницы с сервера (хотя это скорее всего закрыто).
Затем будем пробовать вариант с iframe и локальной страницей.

Нет. С серверной страницы локальная ссылка не открывается. Защита есть.
Пробуем iframe с локальной страницей.

Так тоже не работает. Внутри фрейма выдает ошибку о недоступности локального ресурса.
Значит пробуем следующий вариант. Будем использовать библиотеку javascript с сервера. В ней реализуем обращение.

Теперь отработала. Библиотека с сервера отдает данные в локальную страницу.

Подключаем базу.
под alpine не цепляется mongodb
делаем контейнер от mongodb затем цепляем туда все остальное
Удалось только к вечеру найти решение по состыковке mongodb и python.
Образ от mongodb. Все остальное прикручиваем уже дальше.

18.02.2023 

настроили правильный запуск базы
подключились к базе данных извне
можно делать базу

19.02.2023

Не хочет отдавать данные в скрипте на локальную страницу
Придется сделать исключительно серверную
Отдавать файлы тоже будем напрямую с сервера
По крайней мере ее легко будет встроить в имеющийся интранет сервер


---------------------------------

План:
+ контроль открытия файла
+ подключаем контейнер
+ сервер Flask простой
+ библиотеку jQuery отдаем с сервера
+ принять путь к файлу с сервера и сформировать ссылку
  + локальная страница и ajax через jQuery 
  + серверная страница и локальная ссылка
  + вариант с iframe
  + библиотека с сервера
+ подключить базу
+ внешний каталог для программы и в нем отлаживать
+ подключаем каталог для сканирования
+ инициализация базы
+ единичное сканирование и запись в базу
+ добавляем индексы
+ крон запускаем
- переделка под чистый веб-сервер
- вывод одной записи в браузер
- полнотекстовый индекс
- база за пределами контейнера
- текстом показываем где в локальной сети лежит файл (путь к каталогу)


# ---------------------------------

Структура:
- клиентская часть
  - страница
- серверная часть
  - база данных
    - коллекция со списком файлов
      - путь к файлу или каталогу
      - хеш пути к файлу для нахождения и контроля уникальности по бинарному индексу
      - время последнего удачного сканирования
      - время последнего удачного обнаружения
  - скрипт сканирования каталога
  - запуск базы
  - остановка базы
  - запуск веб-сервера
  - остановка веб-сервера
  - начальный запуск в контейнере
  - крон
  - API интерфейс
    - скрипт для ответа клиенту
- каталоги для сканирования

# --------------------------------------------------------

Команды для Docker:
docker build --pull --rm -f "Dockerfile" -t ls4:latest .
docker run -d -p80:5000 -e SOURCE=C:\Users -v "$(PWD)/data:/data/db:rw" --mount type=bind,source=C:\Users,target=/app/static/files,readonly --name ls4 ls4
docker run -d -p80:5000 -p27017:27017 -v "$(PWD)/data:/data/db:rw" -v ${PWD}:/app:ro -e SOURCE=C:\Users --mount type=bind,source=C:\Users,target=/app/static/files,readonly --name ls4 ls4
docker container ls
docker rm -f ls4
docker exec -it ls4 /bin/sh
docker image ls
docker image prune
docker ps -s

# --------------------------------------------------------

Контейнер тестируем здесь:
http://localhost/

# --------------------------------------------------------

pip3 freeze > requirements.txt

# --------------------------------------------------------
# вывод лога в файл logs.csv
docker exec ls4 python3 log.py > logs.csv